// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: http_like_rpc.proto

#include "http_like_rpc.pb.h"
#include "http_like_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace HttpLikeRpc {

static const char* HttpLike_method_names[] = {
  "/HttpLikeRpc.HttpLike/Post",
};

std::unique_ptr< HttpLike::Stub> HttpLike::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HttpLike::Stub> stub(new HttpLike::Stub(channel));
  return stub;
}

HttpLike::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Post_(HttpLike_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HttpLike::Stub::Post(::grpc::ClientContext* context, const ::HttpLikeRpc::HttpLikeObject& request, ::HttpLikeRpc::HttpLikeObject* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Post_, context, request, response);
}

void HttpLike::Stub::experimental_async::Post(::grpc::ClientContext* context, const ::HttpLikeRpc::HttpLikeObject* request, ::HttpLikeRpc::HttpLikeObject* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Post_, context, request, response, std::move(f));
}

void HttpLike::Stub::experimental_async::Post(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::HttpLikeRpc::HttpLikeObject* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Post_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::HttpLikeRpc::HttpLikeObject>* HttpLike::Stub::AsyncPostRaw(::grpc::ClientContext* context, const ::HttpLikeRpc::HttpLikeObject& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HttpLikeRpc::HttpLikeObject>::Create(channel_.get(), cq, rpcmethod_Post_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HttpLikeRpc::HttpLikeObject>* HttpLike::Stub::PrepareAsyncPostRaw(::grpc::ClientContext* context, const ::HttpLikeRpc::HttpLikeObject& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HttpLikeRpc::HttpLikeObject>::Create(channel_.get(), cq, rpcmethod_Post_, context, request, false);
}

HttpLike::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HttpLike_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HttpLike::Service, ::HttpLikeRpc::HttpLikeObject, ::HttpLikeRpc::HttpLikeObject>(
          std::mem_fn(&HttpLike::Service::Post), this)));
}

HttpLike::Service::~Service() {
}

::grpc::Status HttpLike::Service::Post(::grpc::ServerContext* context, const ::HttpLikeRpc::HttpLikeObject* request, ::HttpLikeRpc::HttpLikeObject* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace HttpLikeRpc

